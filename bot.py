from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import gspread
from datetime import datetime, timedelta, time

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
TOKEN = "7997003832:AAFW8urdKFz5BRElfOG7A9q-YNwG3nFPOFw"
GSHEET_JSON = "bot-project-json.json"
GSHEET_URL = "https://docs.google.com/spreadsheets/d/1atJgfYuwtXBP1uF0uHlRXp611R8mOKwndPQxi9MzUqE/edit?gid=0"
CHAT_ID = 617969116  

# ====== –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets ======
gc = gspread.service_account(filename=GSHEET_JSON)
sheet = gc.open_by_url(GSHEET_URL)
worksheet = sheet.sheet1


# ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ======
def get_records():
    return worksheet.get_all_records()


def get_next_lesson():
    now = datetime.now()
    for lesson in get_records():
        try:
            lesson_date = datetime.strptime(lesson['lesson_date'], "%d.%m.%Y %H:%M")
            if lesson_date >= now:
                return {
                    'title': lesson['lesson_title'],
                    'date': lesson['lesson_date'],
                    'homework_link': lesson.get('homework_for_the_next_lesson', "").replace('"', '').strip(),
                    'meeting': lesson.get('meeting_link', "").replace('"', '').strip(),
                    'summary': lesson.get('lesson_summary', "").strip(),
                    'hour': lesson_date.hour,
                    'minute': lesson_date.minute,
                    'datetime': lesson_date
                }
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Ä–æ–∫–∞:", e)
            continue
    return None


def get_last_lesson():
    now = datetime.now()
    past_lessons = []
    for lesson in get_records():
        try:
            lesson_date = datetime.strptime(lesson['lesson_date'], "%d.%m.%Y %H:%M")
            if lesson_date <= now:
                past_lessons.append({
                    'title': lesson['lesson_title'],
                    'date': lesson['lesson_date'],
                    'homework_link': lesson.get('homework_for_the_next_lesson', "").replace('"', '').strip(),
                    'meeting': lesson.get('meeting_link', "").replace('"', '').strip(),
                    'summary': lesson.get('lesson_summary', "").strip()
                })
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Ä–æ–∫–∞:", e)
            continue
    if past_lessons:
        return past_lessons[-1]
    return None


# ====== –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    START_TEXT = """
–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî —Ç–≤–æ–π –±–æ—Ç-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ —É—á–µ–±–µ!  

üìÖ /lessons ‚Äî –±–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–∫  
üìù /homework ‚Äî –¥–æ–º–∞—à–∫–∞  
üìñ /summary ‚Äî —Å–∞–º–º–∞—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–∫–∞  
üîó /meeting ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É  
üì§ /submit ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–º–∞—à–∫–∏
    """
    await update.message.reply_text(START_TEXT)


async def lessons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lesson = get_next_lesson()
    if lesson:
        buttons = []
        if lesson['homework_link']:
            buttons.append([InlineKeyboardButton("üìò –î–æ–º–∞—à–∫–∞", url=lesson['homework_link'])])
        if lesson['meeting']:
            buttons.append([InlineKeyboardButton("üîó –í—Å—Ç—Ä–µ—á–∞", url=lesson['meeting'])])

        text = f"–ë–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–∫:\nüìñ {lesson['title']}\nüóì {lesson['date']}"
        reply_markup = InlineKeyboardMarkup(buttons) if buttons else None
        await update.message.reply_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text("–ë–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")


async def homework(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lesson = get_next_lesson()
    if lesson and lesson['homework_link']:
        button = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –¥–æ–º–∞—à–∫—É", url=lesson['homework_link'])]])
        await update.message.reply_text("–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É:", reply_markup=button)
    else:
        await update.message.reply_text("–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ.")


async def summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    last_lesson = get_last_lesson()
    if last_lesson and last_lesson['summary']:
        text = f"–°–∞–º–º–∞—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–∫–∞ ({last_lesson['title']}):\n{last_lesson['summary']}"
    else:
        text = "–°–∞–º–º–∞—Ä–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
    await update.message.reply_text(text)


async def submit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å —Ç–≤–æ–∏–º –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º —Å—é–¥–∞.")


async def meeting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lesson = get_next_lesson()
    if lesson and lesson['meeting']:
        button = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—Å—Ç—Ä–µ—á–µ", url=lesson['meeting'])]])
        await update.message.reply_text("–°—Å—ã–ª–∫–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–∫:", reply_markup=button)
    else:
        await update.message.reply_text("–°—Å—ã–ª–∫–∞ –Ω–∞ —É—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞.")


# ====== –ü—Ä–∏—ë–º–∫–∞ –¥–æ–º–∞—à–∫–∏ (—Ñ–∞–π–ª—ã –∏ —Ç–µ–∫—Å—Ç) ======
async def handle_homework(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.document:
        await update.message.document.download_to_drive()
        await update.message.reply_text("‚úÖ –§–∞–π–ª –¥–æ–º–∞—à–∫–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    elif update.message.text:
        await update.message.reply_text(f"‚úÖ –ü—Ä–∏–Ω—è–ª —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–∫–∏:\n{update.message.text}")


# ====== –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ======
async def lesson_reminder_job(context):
    lesson = get_next_lesson()
    if lesson:
        await context.bot.send_message(chat_id=CHAT_ID,
                                       text=f"üìå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É—Ä–æ–∫ '{lesson['title']}' –±—É–¥–µ—Ç {lesson['date']}")


async def homework_reminder_job(context):
    lesson = get_next_lesson()
    if lesson and lesson['homework_link']:
        await context.bot.send_message(chat_id=CHAT_ID,
                                       text=f"üìù –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–¥–µ–ª–∞–π –¥–æ–º–∞—à–∫—É ‚Äî {lesson['homework_link']}")


async def hourly_check_job(context):
    """–ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ—Ç –ª–∏ —É—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ —á–∞—Å."""
    lesson = get_next_lesson()
    if lesson:
        now = datetime.now()
        if timedelta(minutes=50) <= (lesson['datetime'] - now) <= timedelta(minutes=70):
            await context.bot.send_message(chat_id=CHAT_ID,
                                           text=f"‚è∞ –ß–µ—Ä–µ–∑ —á–∞—Å —É—Ä–æ–∫ '{lesson['title']}' ({lesson['date']})")


# ====== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ======
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("lessons", lessons))
    app.add_handler(CommandHandler("homework", homework))
    app.add_handler(CommandHandler("summary", summary))
    app.add_handler(CommandHandler("meeting", meeting))
    app.add_handler(CommandHandler("submit", submit))

    # –ü—Ä–∏—ë–º–∫–∞ –¥–æ–º–∞—à–∫–∏
    app.add_handler(MessageHandler(filters.Document.ALL | filters.TEXT, handle_homework))

    # ====== Job Queue ======
    jq = app.job_queue

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ —É—Ä–æ–∫–∏ (—Å—Ä–µ–¥–∞=2, –ø—è—Ç–Ω–∏—Ü–∞=4 –≤ 10:00)
    jq.run_daily(lesson_reminder_job, time=time(10, 0), days=(2, 4))

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ –¥–æ–º–∞—à–∫—É (–≤—Ç–æ—Ä–Ω–∏–∫=1, —á–µ—Ç–≤–µ—Ä–≥=3, –ø—è—Ç–Ω–∏—Ü–∞=4 –≤ 10:00)
    jq.run_daily(homework_reminder_job, time=time(10, 0), days=(1, 3, 4))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ "—É—Ä–æ–∫ —á–µ—Ä–µ–∑ —á–∞—Å" –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    jq.run_repeating(hourly_check_job, interval=1800, first=10)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

